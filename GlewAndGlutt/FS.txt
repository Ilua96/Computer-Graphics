#define MAX_POINT_LIGHTS 10
#define MAX_DIR_LIGHTS 10
#define MAX_SPOT_LIGHTS 10

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Dir_Light {
    vec3 dir;
	vec3 color;
};

struct Point_Light {
    vec3 pos;
    vec3 color;
    float constant;
    float linear;
    float quadr;
};

struct Spot_Light {
    vec3 pos;
    vec3 dir;
	vec3 color;
    float cutoff;  
    float constant;
    float linear;
    float quadr;     
}; 

out vec4 color;
in vec3 frag_pos;  
in vec3 Normal;  
uniform vec3 view_pos;

uniform Material material;
uniform int count_point_lights; 
uniform int count_dir_lights;
uniform int count_spot_lights; 
uniform Point_Light point_lights[MAX_POINT_LIGHTS];
uniform Spot_Light spot_lights[MAX_SPOT_LIGHTS];
uniform Dir_Light dir_lights[MAX_DIR_LIGHTS];

vec3 norm;
vec3 view_dir;

vec3 point_light(Point_Light light)
{
	float diff_strength = 0.8;
	float ambient_strength = 0.05;
	vec3 light_dir = normalize(light.pos - frag_pos);
	float diff = max(dot(norm, light_dir), 0.0);
	vec3 reflect_dir = reflect(-light_dir, norm); 
	float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
	vec3 ambient = light.color * material.ambient * ambient_strength;
	vec3 diffuse = light.color * diff * material.diffuse * diff_strength;
	vec3 specular = light.color * spec * material.specular;
	float dist = length(light.pos - frag_pos);
    float attenuation = 1.0f / (light.constant + light.linear * dist + light.quadr * (dist * dist));
	return (ambient + diffuse + specular) * attenuation;
};

vec3 spot_light(Spot_Light light)
{
	vec3 light_dir = normalize(light.pos - frag_pos);
	float alpha = dot(light_dir, normalize(-light.dir));
	float diff_strength = 0.8;
	float ambient_strength = 0.05;
	if (alpha > light.cutoff)
	{
		float diff = max(dot(norm, light_dir), 0.0);
		vec3 reflect_dir = reflect(-light_dir, norm); 
		float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
		vec3 ambient = light.color * material.ambient * ambient_strength;
		vec3 diffuse = light.color * diff * material.diffuse * diff_strength;
		vec3 specular = light.color * spec * material.specular;
		float dist = length(light.pos - frag_pos);
		float attenuation = 1.0f / (light.constant + light.linear * dist + light.quadr * (dist * dist));
		return (ambient + diffuse + specular) * attenuation;
	} else {
		vec3 ambient = light.color * material.ambient;
		return light.color * vec3(0.01f, 0.01f, 0.01f);
	}
};

vec3 dir_light(Dir_Light light)
{
	float diff_strength = 0.8;
	float ambient_strength = 0.2;
	vec3 light_dir = normalize(-light.dir);
	float diff = max(dot(norm, light_dir), 0.0);
	vec3 reflect_dir = reflect(-light_dir, norm); 
	float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
	vec3 ambient = light.color * material.ambient * ambient_strength;
	vec3 diffuse = light.color * diff * material.diffuse * diff_strength;
	vec3 specular = light.color * spec * material.specular;
	return (ambient + diffuse + specular);
}

void main(void)
{
	norm = normalize(Normal);
	view_dir = normalize(view_pos - frag_pos);
	vec3 ans = vec3(0.0f, 0.0f, 0.0f);
	for (int i = 0; i < count_point_lights; ++i)
	{
		ans += point_light(point_lights[i]);
	}
	for (int i = 0; i < count_spot_lights; ++i)
	{
		ans += spot_light(spot_lights[i]);
	}
	for (int i = 0; i < count_dir_lights; ++i)
	{
		ans += dir_light(dir_lights[i]);
	}
    color = vec4(ans, 1.0f);
}