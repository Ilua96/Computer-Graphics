#define COUNT_POINT_LIGHTS 1
#define COUNT_DIR_LIGHTS 1
#define COUNT_SPOT_LIGHTS 1

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Dir_Light {
    vec3 dir;
	vec3 color;
};

struct Point_Light {
    vec3 pos;
    vec3 color;
    float constant;
    float linear;
    float quadr;
};

struct Spot_Light {
    vec3 pos;
    vec3 dir;
	vec3 color;
    float angle;  
    float constant;
    float linear;
    float quadr;     
}; 

out vec4 color;
in vec3 frag_pos;  
in vec3 Normal;  
uniform vec3 view_pos;

uniform Material material;
uniform Point_Light point_lights[COUNT_POINT_LIGHTS];
uniform Spot_Light spot_lights[COUNT_SPOT_LIGHTS];
uniform Dir_Light dir_lights[COUNT_DIR_LIGHTS];

vec3 point_light(Point_Light light)
{
	vec3 norm = normalize(Normal);
	vec3 view_dir = normalize(view_pos - frag_pos);
	vec3 light_dir = normalize(light.pos - frag_pos);
	float diff = max(dot(norm, light_dir), 0.0);
	vec3 reflect_dir = reflect(-light_dir, norm); 
	float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
	float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * light.color;
	vec3 diffuse = diff * light.color;
	float specularStrength = 0.5f;
	vec3 specular = specularStrength * spec * light.color;
	float dist = length(light.pos - frag_pos);
    float attenuation = 1.0f / (light.constant + light.linear * dist + light.quadr * (dist * dist));
	return (ambient + diffuse + specular) * attenuation;
};

void main(void)
{
	vec3 ans = vec3(0.0f, 0.0f, 0.0f);
	for(int i = 0; i < COUNT_POINT_LIGHTS; ++i)
	{
		ans += point_light(point_lights[i]);
	}

	/* vec3 norm = normalize(Normal);
	vec3 view_dir = normalize(view_pos - frag_pos);
	vec3 light_dir = normalize(light_pos - frag_pos);

    float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * light_color;

    
	//norm = vec3(0.0f, 1.0f, 0.0f);
    vec3 light_dir = normalize(light_pos - frag_pos);
    float diff = max(dot(norm, light_dir), 0.0);
    vec3 diffuse = diff * light_color;

	float specularStrength = 0.5f;
    vec3 view_dir = normalize(view_pos - frag_pos);
    vec3 reflect_dir = reflect(-light_dir, norm);  
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 32);
    vec3 specular = specularStrength * spec * light_color;

    vec3 result = (ambient + diffuse+ specular) * object_color; */
    color = vec4(ans, 1.0f);
}